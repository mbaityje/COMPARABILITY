---
title: "COMPARABILITY Visualizations"
author: "Christoph Sch√ºr, Marco Baity-Jesi"
format: html
editor: visual
---

## Load packages

```{r echo=FALSE}
library(tidyverse)
library(patchwork)

theme_set(theme_bw(base_size = 14))
```

# Datasets

```{r}
df_full <- readxl::read_xlsx(here::here("input", "20250127-comparability_studies.xlsx")) %>% 
  janitor::clean_names()

```

## Datasets collapsed for single use sources

```{r}

  df_full %>% 
    select(dataset) %>% 
    separate_longer_delim(dataset, delim = ";") %>% 
    count(dataset) %>% 
    write.table(here::here("output", "unclean_datasets.txt"), quote = FALSE, row.names = FALSE)

datasets_unclean <-
  df_full %>% 
    select(dataset) %>% 
    separate_longer_delim(dataset, delim = ";")
  
datasets <-
  datasets_unclean %>% 
    mutate(datasets_clean = case_when(

      dataset == "EnviroTox" ~ "EnviroTox database",
      dataset == "Wu et al. 2016" ~ "Wu et al. (2016)",
      dataset == "Khan et al. 2019" ~ "Khan et al. (2019)",
      dataset == "Khan et al. (2019a)" ~ "Khan et al. (2019)",
      dataset == "Khan et al. 2019a" ~ "Khan et al. (2019)",
      dataset == "Khan et al. 2019b" ~ "Khan et al. (2019)",
      str_detect(dataset, "Japanese Ministry") ~ "Japanese Ministry of Environment",
      dataset == "Toropov 2017" ~ "Toropov et al. (2017)",
      dataset == "Pesticides Properties Database (PPDB)" ~ "Pesticide Properties Database (PPDB)",
      dataset == "PPDB (2015)" ~ "Pesticide Properties Database (PPDB)",
      dataset == "EPA fathead minnow acute toxicity database (EPAFHM)" ~ "Fathead minnow database",
      dataset == "ECOTOX database" ~ "ECOTOX Database",
      dataset == "Cheng et al.(2011)" ~ "Cheng et al. (2011)",
      TRUE ~ dataset
      
    ))

datasets %>% 
  count(dataset)

datasets_plot_aggregated <- datasets %>% 
  mutate(datasets_clean = fct_lump_min(datasets_clean, min = 3, other_level = "Other (<3 uses)")) %>%
  count(datasets_clean) %>% 
  ggplot(aes(y=fct_reorder(datasets_clean, n), n))+
  geom_col(col = "darkgrey", fill = "#22577A")+
  labs(y="Dataset", x = "Times used")+
  theme(plot.background = element_rect(colour = "white", fill="white", size=0))

datasets_plot_aggregated

# ggsave(plot = last_plot(), filename = "Datasets_counts_aggregated.pdf", path = here::here("figures"), height = 100, width = 150, units = "mm", device = "pdf")
```

## Datasets all

```{r}

# datasets_plot_all <- datasets %>% 
#   count(dataset) %>% 
#   ggplot(aes(y=fct_reorder(dataset, n), n))+
#   geom_col(col = "darkgrey", fill = "#22577A")+
#   labs(y="Dataset", x = "Times used")+
#   scale_y_discrete(labels = function(x) stringr::str_trunc(x, width = 26))
# 
# datasets_plot_all
# 
# ggsave(plot = last_plot(), filename = "Datasets_counts.pdf", path = here::here("figures"), height = 300, width = 200, units = "mm", device = "pdf")
```

## Dataset versions reported

```{r}
# datasets_versions_reporting <- read_csv(here::here("input", "dataset_version_reported.csv"))

datasets_version_plot <-
  df_full%>%
    select(version) %>% 
    mutate(version = str_replace_all(version, ",", ";")) %>% 
    separate_longer_delim(version, delim = ";") %>% 
    mutate(version = fct_other(version, keep = c("not reported", "single paper"), other_level = "reported")) %>% 
    count(version, sort = TRUE) %>% 
  ggplot(aes(y=fct_reorder(version, n), x=n))+
  geom_col(col = "darkgrey", fill = "#38A3A5")+
  labs(y = "Number of entries", x = "Dataset version")+
  theme(plot.background = element_rect(colour = "black", fill="white", size=1))

datasets_version_plot

# ggsave(plot = last_plot(), filename = "Dataset_versions.pdf", path = here::here("figures"), height = 50, width = 100, units = "mm", device = "pdf")
```

```{r}
# datasets_plot_all + (datasets_version_plot/plot_spacer()/plot_spacer()) + 
  # plot_layout(widths = c(2,1)) +
  # plot_annotation(tag_levels = "A")

# datasets_plot_all / datasets_version_plot + 
  # plot_layout(heights = c(5,1)) +
  # plot_annotation(tag_levels = "A")

# ggsave(plot = last_plot(), filename = "Patchwork-datasets_and_versions.pdf", path = here::here("figures"), height = 250, width = 200, units = "mm", device = "pdf")

patchwork_plot_datasets_inset <- datasets_plot_aggregated + inset_element(datasets_version_plot, 0.3, 0.01, 0.99, 0.6, align_to = "panel", on_top = TRUE)+
  plot_annotation(tag_levels = "A")

patchwork_plot_datasets_inset

ggsave(plot = patchwork_plot_datasets_inset, filename = "Figure-datasets_and_versions.pdf", path = here::here("figures"), height = 120, width = 200, units = "mm", device = "pdf")
```

# Dataset cleaning

```{r}

# columns:
#  [1] "entry_id"               "article"                "article_short"          "dataset"                "version"                "dataset_chemical_space" "dataset_tax_space"      "dataset_expspace"       "aggregation"            "missing_values"         "missing_values_desc"    "standardization"       
# [13] "standardization_desc"   "outliers_removed"       "outliers_desc"          "modeling_task"          "effect_type"            "effect_endpoint"        "splitting"              "splitting_desc"         "splitting_exact"        "splitting_ratio"        "code_reported"          "metrics_clear"         
# [25] "performance_metrics"    "dataset_availability" 


```

```{r}
# aggregation, missing values, standardization, outliers



```

## Restrictions on experimental, chemical, and taxonomic space

```{r}
# df_full %>% 
#   select(dataset_expspace) %>% 
#   separate_longer_delim(cols = dataset_expspace, delim = ";") %>% 
#   filter(!is.na(dataset_expspace)) %>% 
#   count(dataset_expspace) %>% 
#   writexl::write_xlsx(path = here::here("output", "raw-experimental_space_categories.xlsx"))
#   ggplot(aes(y=fct_reorder(dataset_expspace, n), x = n))+
#   geom_col()
```

```{r}
# df_full %>% 
#   select(dataset_chemical_space) %>% 
#   separate_longer_delim(cols = dataset_chemical_space, delim = ";") %>% 
#   count(dataset_chemical_space) %>% 
#   writexl::write_xlsx(path = here::here("output", "raw-chemical_space_categories.xlsx"))
#   
# 
# df_full %>% 
#   select(dataset_chemical_space) %>% 
#   separate_longer_delim(cols = dataset_chemical_space, delim = ";") %>% 
#   count(dataset_chemical_space) %>% 
#   filter(!is.na(dataset_chemical_space)) %>% 
#   count(dataset_chemical_space) %>% 
#   ggplot(aes(y=fct_reorder(dataset_chemical_space, n), x = n))+
#   geom_col()
```

```{r}
# df_full %>% 
#   select(dataset_tax_space) %>% 
#   separate_longer_delim(cols = dataset_tax_space, delim = ";") %>% 
#   count(dataset_tax_space) %>% 
#   writexl::write_xlsx(path = here::here("output", "raw-taxonomic_space_categories.xlsx"))
#   
#   filter(!is.na(dataset_chemical_space)) %>% 
#   count(dataset_chemical_space) %>% 
#   ggplot(aes(y=fct_reorder(dataset_chemical_space, n), x = n))+
#   geom_col()
```

```{r}
# df_chem_space_clean <- readxl::read_xlsx(path = here::here("input", "raw-chemical_space_categories_CLEANED.xlsx")) %>% 
#   mutate(meta_category = "Chemical space") %>% 
#   rename(small_category = 1)
# 
# 
# df_exp_space_clean <- readxl::read_xlsx(path = here::here("input", "raw-experimental_space_categories-CLEANED.xlsx")) %>% 
#   mutate(meta_category = "Experimental space") %>% 
#   rename(small_category = 1, 
#          coarse_groups = 2)
# 
# df_chem_space_clean %>% 
#   colnames()
# df_exp_space_clean %>% 
#   colnames()
# 
# df_chem_space_clean %>% 
#   rbind(df_exp_space_clean) %>% 
#   mutate(coarse_groups = str_replace_all(coarse_groups, "NA", NA_character_)) %>% 
#   filter(!is.na(coarse_groups)) %>% 
#   group_by(meta_category, coarse_groups) %>% 
#   summarize(sum = sum(n)) %>% 
#   ggplot(aes(y=fct_reorder(coarse_groups,sum), x=sum, fill = meta_category))+
#   geom_col(col = "darkgrey")+
#   labs(fill = NULL,
#        y = "Broad filtering categories",
#        x = "Reported number of times")+
#   scale_fill_brewer(palette = 2)+
#   theme(legend.background = element_rect(fill="white", color = "black", size=0.5, linetype="solid"),
#         legend.position = "inside",
#         legend.position.inside = c(0.6, 0.2))

```

## Aggregation

```{r}
aggregation_unclean <- df_full %>% 
  select(aggregation) 

aggregation_clean <-
  aggregation_unclean %>% 
  mutate(aggregation_simplified = case_when(
    aggregation == "not reported" ~ "not reported",
    aggregation == "median of multiple values" ~ "median",
    aggregation == "Averages taken for duplicates if ratio of highest to lowest values < 3:1; otherwise, record excluded." ~ "mean",
    aggregation == "Calculation of median, arithmetic, and geometric means for multiple values; geometric mean chosen for normalization" ~ "geometric mean",
    str_detect(aggregation, "The toxicity values were divided into four categories via k-means clustering based on the toxicity levels. It involved categorization rather ") ~ "not reported",
    aggregation == "averaging multiple entries for species-chemical combinations" ~ "mean",
    aggregation == "duplicates and suspected duplicates removed" ~ "removal",
    aggregation == "geometric mean for chemical, species, test duration" ~ "geometric mean",
    aggregation == "lowest value" ~ "minimum",
    
    aggregation == "mean for multiple QSAR values" ~ "mean",
    aggregation == "no" ~ "not reported",
    aggregation == "removal of duplicates with different biological activity" ~ "removal",
    aggregation == "removed duplicates, removed conflicting records (same compound, different toxicity classes)" ~ "removal",
    aggregation == "selected lowest value of multiples" ~ "minimum",
    aggregation == "where multiple values apply per chemical the most toxic data is selected" ~ "minimum",
    str_detect(aggregation, "effect values <= 10 % we") ~ "unclear",
    TRUE ~ aggregation
    # aggregation == "" ~ "",
    
    
    
    
  ))
  
```

```{r}
plot_aggregation <- aggregation_clean %>% 
  select(aggregation_simplified) %>% 
  count(aggregation_simplified) %>% 
  ggplot(aes(y=fct_reorder(aggregation_simplified, n), n))+
  geom_col(col = "darkgrey", fill = "#ffd6ff")+
   labs(x="Number of entries",
       y="",
       title = "Aggregation")+
    theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_aggregation
```

## Standardization

```{r}

  data_standardization <- df_full %>% 
  select(standardization) %>% 
  mutate(standardization = str_replace_all(standardization, "yes, chemical structures", "yes")) %>% 
  mutate(standardization = str_replace_all(standardization, "box-cox-transformation", "yes")) %>% 
  mutate(standardization = str_replace_all(standardization, "SMILES neutralized and standardized", "yes")) %>% 
  count(standardization)
  
  plot_standardization <- data_standardization %>% 
  ggplot(aes(y=fct_reorder(standardization, n), n))+
  geom_col(col = "darkgrey", fill = "#9d4edd")+
   labs(x="Number of entries",
       y="",
       title = "Standardization")+
    theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_standardization
```

## Missing values

```{r}
data_missing_values <- df_full %>% 
  select(missing_values) %>% 
  count(missing_values)

plot_missing_values <- data_missing_values %>% 
  ggplot(aes(y=fct_reorder(missing_values, n), n))+
  geom_col(col = "darkgrey", fill = "#b5179e")+
  labs(x="Number of entries",
       y="",
       title = "Missing values")+
  theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_missing_values
```

## Outlier treatment

```{r}

data_outlier_removal <- df_full %>%
  select(outliers_removed, outliers_desc) %>% 
  mutate(outliers_removed = str_replace_all(outliers_removed, "see desc", "not reported")) %>% 
  mutate(outliers_removed = str_replace_all(outliers_removed, "used most toxic data point", "not reported")) %>% 
  count(outliers_removed) 

plot_outlier_removal <- data_outlier_removal %>% 
  ggplot(aes(y=fct_reorder(outliers_removed, n), n))+
  geom_col(col = "darkgrey", fill = "#3c096c")+
   labs(x="Number of entries",
       y="",
       title = "Outlier removal")+
  theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_outlier_removal
```

### Combination of cleaning plots

```{r}
# plot_aggregation + plot_standardization + plot_missing_values + plot_outlier_removal + plot_layout(ncol = 2) + plot_annotation(tag_levels = "A")

# ggsave(plot = last_plot(), filename = "Figure-cleaning.pdf", path = here::here("figures"), height = 150, width = 200, units = "mm", device = "pdf")
```

### single plot

```{r}

df_std <-
  data_standardization %>% 
  mutate(factor = "standardization") %>% 
  rename(level = standardization)

df_missing <- data_missing_values %>% 
  mutate(factor = "missing values") %>% 
  rename(level = 1) 

df_outlier <-
  data_outlier_removal %>% 
    mutate(factor = "outliers removed") %>% 
  rename(level = 1) 

cleaning_plot_simplified <- df_std %>% 
  rbind(df_missing) %>% 
  rbind(df_outlier) %>% 
  ggplot(aes(y=factor, x=n, fill = level))+
  geom_col(position = "stack", col = "darkgrey")+
  labs(title = "General cleaning", y="", x = "Number of studies")+
  scale_fill_manual(values = c("not reported" = "#bc4749",
                               "yes" = "#a7c957"))+
  geom_text(aes(label = level, x = n-5), nudge_x = c(0.22, -0.22), color = "black") +
  theme(legend.position = "none",
        plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")
```

```{r}
plot_aggregation + cleaning_plot_simplified + plot_layout(ncol = 2) + plot_annotation(tag_levels = "A")

ggsave(plot = last_plot(), filename = "Figure-cleaning_simplified.pdf", path = here::here("figures"), height = 100, width = 200, units = "mm", device = "pdf")
```

## Splitting

```{r}
plot_split_parameter <- df_full %>% 
  select(splitting) %>% 
  mutate(splitting = as.character(splitting)) %>% 
  separate_longer_delim(splitting, delim = ";") %>% 
  mutate(splitting = str_trim(splitting)) %>% 
  mutate(splitting = str_replace_all(splitting, "stratification_chem|strat_chemicals|strat_chem", "Stratification, chemicals")) %>% 
  mutate(splitting = str_replace_all(splitting, "EC50-based|strat_tox|stratification_tox", "Stratification, tox")) %>% 
  mutate(splitting = str_to_sentence(splitting)) %>%
  mutate(splitting = fct_lump_n(splitting, n = 5, other_level = "Other")) %>% 
  count(splitting, sort = TRUE) %>% 
  ggplot(aes(y=fct_reorder(splitting, n), n))+
  geom_col(col = "darkgrey", fill = "#386641")+
  labs(x="Number of entries",
       y="",
       title = "Spliting category (Top5)")+
  theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_split_parameter
```

```{r}
plot_split_ratio <- df_full %>% 
  select(splitting_ratio) %>% 
  mutate(splitting_ratio = fct_lump_n(splitting_ratio, n = 5, other_level = "Other")) %>% 
  count(splitting_ratio) %>% 
  ggplot(aes(y=fct_reorder(splitting_ratio, n), x=n))+
  geom_col(col = "darkgrey", fill = "#6a994e")+
  labs(x="Number of entries",
       y="",
       title = "Spliting ratio (Top5)")+
  theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_split_ratio
```

```{r}
plot_split_parameter + plot_split_ratio + plot_annotation(tag_levels = "A")

ggsave(plot = last_plot(), filename = "Plots_splitting.pdf", path = here::here("figures"), height = 80, width = 180, units = "mm", device = "pdf")
```

## Metrics

### Save metrics for manual cleaning

```{r}

metrics_unclean <- df_full %>% 
  select(performance_metrics) %>% 
  separate_longer_delim(performance_metrics, delim = ";") %>% 
  separate_longer_delim(performance_metrics, delim = ",") %>% 
  mutate(performance_metrics = str_trim((performance_metrics)))

  # writexl::write_xlsx(here::here("output", "performance_metrics_unclean.xlsx"))
```

### Load and process cleaned metrics

```{r}

df_metrics_clean <-
  metrics_unclean %>% 
    filter(!str_detect(performance_metrics, "Q")) %>% 
    filter(performance_metrics != "NA") %>% 
    filter(performance_metrics != "") %>% 
    mutate(performance_metrics_simplified = case_when(
      str_detect(performance_metrics, "Root Mean Square Error") ~ "RMSE",
                 str_detect(performance_metrics, "Accuracy|ACC|accuracy") ~ "Accuracy",
                 str_detect(performance_metrics, "Area Under the ROC Curve") ~ "AUC",
                 str_detect(performance_metrics, "F1") ~ "F1 score",
                 performance_metrics == "MAE (mean absolute error)|Mean Absolute Error (MAE)|MAE" ~ "MAE",
                 performance_metrics == "Precision|Precision (PR)" ~ "Precision",
                 str_detect(performance_metrics, "Root Mean Square") ~ "RMSE",
                 str_detect(performance_metrics, "RMSE") ~ "RMSE",
                 str_detect(performance_metrics, "MAE") ~ "MAE",
                 str_detect(performance_metrics, "R2") ~ "R^2",
                 str_detect(performance_metrics, "R\\^2") ~ "R^2",
                 str_detect(performance_metrics, "R\\¬≤") ~ "R^2",
                 str_detect(performance_metrics, "R\\^2 (coefficient of determination)") ~ "R^2",
                 str_detect(performance_metrics, "Correlation Coefficient") ~ "R^2",
                 str_detect(performance_metrics, "precision|Precision") ~ "Precision",
                 str_detect(performance_metrics, "recall") ~ "Recall",
                 str_detect(performance_metrics, "Recall") ~ "Recall",
                 str_detect(performance_metrics, "r\\¬≤|r\\^2") ~ "r^2",
                 str_detect(performance_metrics, "r\\^2") ~ "r^2",
                 str_detect(performance_metrics, "sensitivity") ~ "Sensitivity",
                 str_detect(performance_metrics, "Specificity|specificity") ~ "Specificity",
                 str_detect(performance_metrics, "RM¬≤LOO") ~ "RMSE",
                 str_detect(performance_metrics, "CCC") ~ "CCC",
                 str_detect(performance_metrics, "mean squared error of prediction") ~ "MSE",
                 str_detect(performance_metrics, "SE (standard error of prediction)") ~ "Standard Error of Prediction (SEP)",
                 str_detect(performance_metrics, "MCC") ~ "Matthews correlation coefficient (MCC)",
                 # performance_metrics == "" ~ "",
                 TRUE ~ performance_metrics
      
    ))

plot_performance_metrics <- df_metrics_clean %>% 
  select(performance_metrics_simplified) %>% 
  filter(!is.na(performance_metrics_simplified)) %>% 
  mutate(performance_metrics_simplified = fct_lump_n(performance_metrics_simplified, n = 10, other_level = "Other")) %>% 
  count(performance_metrics_simplified, sort = TRUE) %>% 
  ggplot(aes(y=fct_reorder(performance_metrics_simplified, n), n))+
  geom_col(color = "darkgrey", fill = "#ee6c4d")+
    labs(x="Number of occurences",
       y="",
       title = "Performance metrics (Top10)")+
  theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_performance_metrics

# ggsave(plot = last_plot(), filename = "plot_performance_metrics.pdf", path = here::here("figures"), height = 80, width = 100, units = "mm", device = "pdf")
```

```{r}
plot_modeling_task <- df_full %>% 
  select(modeling_task) %>% 
  separate_longer_delim(modeling_task, delim = ";") %>% 
  mutate(modeling_task = str_trim(modeling_task)) %>% 
  count(modeling_task) %>% 
  ggplot(aes(y=fct_reorder(modeling_task, n), n))+
  geom_col(col = "darkgrey", fill = "#293241")+
    labs(x="Number of occurences",
       y="",
       title = "Modeling task")+
  theme(plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_modeling_task
```

```{r}

plot_metrics_clear <-
  df_full %>% 
  select(metrics_clear) %>% 
  filter(!is.na(metrics_clear)) %>% 
  filter(metrics_clear != "NA") %>% 
  mutate(metrics_clear = str_replace_all(metrics_clear, "not reported", "no")) %>% 
  count(metrics_clear) %>% 
  mutate(metric = "Metrics reported",
         n_total = sum(n),
         percent = round((n/n_total)*100),1) %>% 
  ggplot(aes(y=metric, x=percent, fill = metrics_clear))+
  geom_col(position="stack")+
  scale_fill_manual(values = c("no" = "#ed6a5a",
                               "yes" = "#5ca4a9",
                               "in code" = "#9bc1bc"))+
  geom_text(aes(label = metrics_clear), color = "black", position = position_stack(vjust = 0.5))+
  coord_flip()+
  labs(y="",
       x="Percent of studies",
       title = "Metrics defined")+
  theme(legend.position = "none",
        plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot")

plot_metrics_clear
```

```{r}
plot_performance_metrics + plot_modeling_task + plot_metrics_clear + plot_annotation(tag_levels = "A")

ggsave(plot = last_plot(), filename = "plots_performance_metrics_task_reporting.pdf", path = here::here("figures"), height = 100, width = 250, units = "mm", device = "pdf")
```

## Reporting

### Code provided

```{r}

plot_code_reported <-
  df_full %>% 
  select(code_reported) %>% 
  mutate(code_reported = str_replace_all(code_reported, "not reported", "no")) %>% 
  mutate(code_reported = replace_na(code_reported, "no")) %>% 
  mutate(code_reported = str_replace_all(code_reported, "NA", "no")) %>% 
  mutate(code_reported_general = case_when(
    code_reported == "no" ~ "no",
    code_reported == "yes" ~ "yes",
    code_reported == "on request" ~ "no",
    code_reported == "models only" ~ "yes"
  )) %>%
  count(code_reported, code_reported_general) %>% 
    mutate(code_reported = factor(code_reported, levels=c("no", "on request", "models only", "yes"))) %>% 
  ggplot(aes(y=fct_reorder(code_reported_general, n), n, fill = code_reported))+
  geom_col(col = "darkgrey")+
  scale_fill_manual(values = c("no" = "#8c1c13",
                               "yes" = "#a7c957",
                               "on request" = "#bc4749",
                               "models only" = "#386641"))+
  labs(y="",
       x="Number of studies",
       title = "Code reported",
       fill = "")+
  theme(legend.position = "bottom",
        plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot",
    legend.text=element_text(size=8))+
  guides(fill = guide_legend(ncol = 2, override.aes = list(size = 0.8)))

plot_code_reported
```

```{r}
plot_dataset_availability <-
  df_full %>% 
  select(dataset_availability) %>% 
  mutate(dataset_availability = replace_na(dataset_availability, "not reported")) %>% 
  mutate(dataset_availability = str_replace_all(dataset_availability, "not reported", "no")) %>% 
  mutate(dataset_availability = str_replace_all(dataset_availability, "NA", "no")) %>% 
  mutate(dataset_availabilty_general = case_when(
    str_detect(dataset_availability, "yes") ~ "yes",
    dataset_availability == "not reported" ~ "not reported",
    dataset_availability == "no" ~ "no",
    dataset_availability == "from source" ~ "yes",
    dataset_availability == "on request" ~ "no"
  )) %>% 
  count(dataset_availabilty_general, dataset_availability) %>%  
    mutate(dataset_availability = factor(dataset_availability, levels=c("no", "on request", "from source", "yes (public data only)", "yes"))) %>% 
  ggplot(aes(y=fct_reorder(dataset_availabilty_general, n), n, fill = dataset_availability))+
  geom_col(col = "darkgrey")+
   scale_fill_manual(values = c("no" = "#8c1c13",
                               "yes" = "#a7c957",
                               "on request" = "#bc4749",
                               "from source" = "#6a994e",
                               "yes (public data only)" = "#386641"))+
  labs(y="",
       x="Number of studies",
       title = "Dataset availability",
       fill = "")+
  theme(legend.position = "bottom",
        plot.caption = element_text(hjust = 0),
        plot.title.position = "plot",
        plot.caption.position =  "plot",
    # legend.position.inside =  c(0.85, 0.75),
    legend.text=element_text(size=8))+
  guides(fill = guide_legend(ncol = 2, override.aes = list(size = 0.8)))

plot_dataset_availability
```

```{r}
plot_code_reported + plot_dataset_availability + plot_annotation(tag_levels = "A")

ggsave(plot = last_plot(), filename = "plots-code_reported-dataset_availability.pdf", path = here::here("figures"), height = 140, width = 240, units = "mm", device = "pdf")
```
